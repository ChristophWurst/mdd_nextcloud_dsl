/*
 * generated by Xtext 2.10.0
 */
package com.nextcloud.validation

import com.nextcloud.appDSL.App
import com.nextcloud.appDSL.AppDSLPackage
import org.eclipse.xtext.validation.Check
import com.nextcloud.appDSL.Entity
import com.nextcloud.appDSL.Attribute
import com.nextcloud.appDSL.CustomAttribute
import com.nextcloud.appDSL.RefAttribute

class AppDSLValidator extends AbstractAppDSLValidator {

	public static val INVALID_APP_NAME = 'invalidName'
	public static val INVALID_ENTITY_NAME = 'invalidName'
	public static val NO_ENTITY_ATTRIBUTES = 'noEntityAttributes'
	public static val DUPLICATE_ATTRIBUTE_NAME = 'invalidAttributeName'
	public static val ATTRIBUTE_NAME_TOO_LONG = 'attributeNameTooLong'
	public static val MANUAL_ID_ATTRIBUTE = 'manualIdAttribute'
	private static val REGEX_CAMEL_CASE = "[A-Z][a-z]*([A-Z]+[a-z]*)*"

	@Check
	def checkAppNameStartsWithCapital(App app) {
		if (!app.name.matches(REGEX_CAMEL_CASE)) {
			error('App name should be camel case', AppDSLPackage.Literals.APP__NAME,
				com.nextcloud.validation.AppDSLValidator.INVALID_APP_NAME)
		}
	}

	@Check
	def checkEntityName(Entity entity) {
		if (!entity.name.matches(REGEX_CAMEL_CASE)) {
			error('Entity name is empty or not camel case', AppDSLPackage.Literals.ENTITY__NAME,
				com.nextcloud.validation.AppDSLValidator.NO_ENTITY_ATTRIBUTES)
		}
	}

	@Check
	def checkEntityHasAttributes(Entity entity) {
		if (entity.attributes.size == 0) {
			info('Entity does not have any attributes', AppDSLPackage.Literals.ENTITY__ATTRIBUTES,
				com.nextcloud.validation.AppDSLValidator.NO_ENTITY_ATTRIBUTES)
		}
	}

	@Check
	def checkEntityAttributeNamesUniquea(Attribute attribute) {
		var parent = attribute.eContainer as Entity;
		if (parent.attributes.filter[a|a.name == attribute.name].size > 1) {
			if (attribute instanceof CustomAttribute) {
				error('Attribute is not unique', AppDSLPackage.Literals.CUSTOM_ATTRIBUTE__NAME,
					com.nextcloud.validation.AppDSLValidator.DUPLICATE_ATTRIBUTE_NAME)
			} else if (attribute instanceof RefAttribute) {
				error('Attribute is not unique', AppDSLPackage.Literals.REF_ATTRIBUTE__REF,
					com.nextcloud.validation.AppDSLValidator.DUPLICATE_ATTRIBUTE_NAME)
			}
		}
	}

	def getName(Attribute attribute) {
		if (attribute instanceof RefAttribute) {
			return (attribute as RefAttribute).ref.name.toLowerCase + '_id';
		} else if (attribute instanceof CustomAttribute) {
			return (attribute as CustomAttribute).name;
		}
		return '';
	}

	@Check
	def checkColumnNameLength(CustomAttribute attribute) {
		// Names longer than 32chars are problematic
		if (attribute.name.length > 32) {
			warning(
				'Long attribute names are problematic on SQLite',
				AppDSLPackage.Literals.CUSTOM_ATTRIBUTE__NAME,
				com.nextcloud.validation.AppDSLValidator.ATTRIBUTE_NAME_TOO_LONG
			);
		}
	}

	@Check
	def checkCustomIdAttribute(CustomAttribute attribute) {
		// an 'id' attribute is generated automatically, so we have to prevent
		// a manually added one.
		if (attribute.name == 'id') {
			error('An \'id\' attribute is generated automatically', AppDSLPackage.Literals.CUSTOM_ATTRIBUTE__NAME,
				com.nextcloud.validation.AppDSLValidator.MANUAL_ID_ATTRIBUTE)
		}
	}

}
